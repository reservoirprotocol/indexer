{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "enum CurveErrorCode",
          "name": "error",
          "type": "uint8"
        }
      ],
      "name": "BondingCurveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "adminFee",
          "type": "uint96"
        }
      ],
      "name": "DittoPoolMainAdminFeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMainAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMainInvalidAdminFeeRecipient",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "basePrice",
          "type": "uint128"
        }
      ],
      "name": "DittoPoolMainInvalidBasePrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "delta",
          "type": "uint128"
        }
      ],
      "name": "DittoPoolMainInvalidDelta",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMainInvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMainInvalidPermitterData",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "lpFee",
          "type": "uint96"
        }
      ],
      "name": "DittoPoolMainLpFeeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMainNoDirectNftTransfers",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMarketMakeInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMarketMakeInvalidNftTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMarketMakeMustDepositLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMarketMakeNotAuthorizedForLpId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolMarketMakeWrongPoolForLpId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeInTooManyTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeInsufficientBalanceToBuyNft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeInsufficientBalanceToPayFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeInvalidTokenRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeInvalidTokenSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeMustAskForMoreThanZeroNfts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeNftAndLpIdsMustBeSameLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        }
      ],
      "name": "DittoPoolTradeNftNotOwnedByPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeNoNftsProvided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DittoPoolTradeOutTooFewTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerTwoStepNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerTwoStepNotPendingOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "AdminChangedAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "adminFeeRecipient",
          "type": "address"
        }
      ],
      "name": "AdminChangedAdminFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newBasePrice",
          "type": "uint128"
        }
      ],
      "name": "AdminChangedBasePrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newDelta",
          "type": "uint128"
        }
      ],
      "name": "AdminChangedDelta",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "AdminChangedLpFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newBasePrice",
          "type": "uint128"
        }
      ],
      "name": "BasePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newDelta",
          "type": "uint128"
        }
      ],
      "name": "DeltaChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenWithdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnerTwoStepOwnerRenouncedOwnership",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnerTwoStepOwnerStartedTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerTwoStepOwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerTwoStepPendingOwnerAcceptedTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "delta",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "basePrice",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "PoolInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "lpIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeLp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAdmin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeProtocol",
          "type": "uint256"
        }
      ],
      "name": "SwappedNftsForTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "sellerlpIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeLp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAdmin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeProtocol",
          "type": "uint256"
        }
      ],
      "name": "SwappedTokensForNfts",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIdList_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenDepositAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "permitterData_",
          "type": "bytes"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFee",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "feeAdmin_",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basePrice",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondingCurve",
      "outputs": [
        {
          "internalType": "string",
          "name": "curve",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "newFeeAdmin_",
          "type": "uint96"
        }
      ],
      "name": "changeAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdminFeeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeAdminFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newBasePrice_",
          "type": "uint128"
        }
      ],
      "name": "changeBasePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newDelta_",
          "type": "uint128"
        }
      ],
      "name": "changeDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "newFeeLp_",
          "type": "uint96"
        }
      ],
      "name": "changeLpFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpRecipient_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIdList_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenDepositAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "permitterData_",
          "type": "bytes"
        }
      ],
      "name": "createLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dittoPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLpIdTokenBalances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lpId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct LpIdToTokenBalance[]",
          "name": "balances",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolHeldNftIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolLpIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "lpIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numNfts_",
          "type": "uint256"
        }
      ],
      "name": "getBuyNftQuote",
      "outputs": [
        {
          "internalType": "enum CurveErrorCode",
          "name": "error",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newBasePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "admin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            }
          ],
          "internalType": "struct Fee",
          "name": "fee",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "buyPriceAndLpFeePerNft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        }
      ],
      "name": "getLpIdForNftId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpNft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpId_",
          "type": "uint256"
        }
      ],
      "name": "getNftCountForLpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpId_",
          "type": "uint256"
        }
      ],
      "name": "getNftIdsForLpId",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolTotalNftBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolTotalTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalTokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numNfts_",
          "type": "uint256"
        }
      ],
      "name": "getSellNftQuote",
      "outputs": [
        {
          "internalType": "enum CurveErrorCode",
          "name": "error",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "newBasePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "admin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            }
          ],
          "internalType": "struct Fee",
          "name": "fee",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "sellPricePerNftIgnoreLpFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpId_",
          "type": "uint256"
        }
      ],
      "name": "getTokenBalanceForLpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpId_",
          "type": "uint256"
        }
      ],
      "name": "getTotalBalanceForLpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "feeLp",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "feeAdmin",
              "type": "uint96"
            },
            {
              "internalType": "uint128",
              "name": "delta",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "basePrice",
              "type": "uint128"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIdList",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "initialTokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreatePoolParams",
          "name": "params_",
          "type": "tuple"
        },
        {
          "internalType": "contract LpNft",
          "name": "lpNft_",
          "type": "address"
        },
        {
          "internalType": "contract IPermitter",
          "name": "permitter_",
          "type": "address"
        }
      ],
      "name": "initPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFee",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "feeLp_",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permitter",
      "outputs": [
        {
          "internalType": "contract IPermitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeProtocol_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawalAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "nftIdList_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenWithdrawAmount_",
          "type": "uint256"
        }
      ],
      "name": "pullLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "lpIds_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minExpectedTokenOutput_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftSender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenRecipient_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "permitterData_",
          "type": "bytes"
        }
      ],
      "name": "swapNftsForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "nftIds_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxExpectedTokenInput_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenSender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftRecipient_",
          "type": "address"
        }
      ],
      "name": "swapTokensForNfts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner_",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "acceptOwnership()": "79ba5097",
    "addLiquidity(uint256,uint256[],uint256,bytes)": "971bd4e2",
    "adminFee()": "a0be06f9",
    "adminFeeRecipient()": "ee11d5eb",
    "basePrice()": "c7876ea4",
    "bondingCurve()": "eff1d50e",
    "changeAdminFee(uint96)": "e8403410",
    "changeAdminFeeRecipient(address)": "cffd8493",
    "changeBasePrice(uint128)": "ce10885e",
    "changeDelta(uint128)": "6809f664",
    "changeLpFee(uint96)": "3f5c9a9b",
    "createLiquidity(address,uint256[],uint256,bytes)": "5dd7c991",
    "delta()": "12b495a8",
    "dittoPoolFactory()": "970e959a",
    "fee()": "ddca3f43",
    "getAllLpIdTokenBalances()": "0120db8a",
    "getAllPoolHeldNftIds()": "bf87c6a3",
    "getAllPoolLpIds()": "cffe894e",
    "getBuyNftQuote(uint256)": "9cd41880",
    "getLpIdForNftId(uint256)": "287aa99d",
    "getLpNft()": "bed10c13",
    "getNftCountForLpId(uint256)": "a83e5a24",
    "getNftIdsForLpId(uint256)": "8cb95205",
    "getPoolTotalNftBalance()": "1b62501e",
    "getPoolTotalTokenBalance()": "77ea7997",
    "getSellNftQuote(uint256)": "8ec3d963",
    "getTokenBalanceForLpId(uint256)": "8223a9fd",
    "getTotalBalanceForLpId(uint256)": "63b8ced8",
    "initPool((address,address,uint96,address,uint96,uint128,uint128,uint256[],uint256),address,address)": "1c0f4dd6",
    "initialized()": "158ef93e",
    "lpFee()": "704ce43e",
    "nft()": "47ccca02",
    "onERC721Received(address,address,uint256,bytes)": "150b7a02",
    "owner()": "8da5cb5b",
    "pendingOwner()": "e30c3978",
    "permitter()": "529d2ef3",
    "protocolFee()": "b0e21e8a",
    "pullLiquidity(address,uint256,uint256[],uint256)": "d6a1a29a",
    "renounceOwnership()": "715018a6",
    "swapNftsForTokens(uint256[],uint256[],uint256,address,address,bytes)": "86a6bb61",
    "swapTokensForNfts(uint256[],uint256,address,address)": "fa7dcc1c",
    "token()": "fc0c546a",
    "transferOwnership(address)": "f2fde38b"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum CurveErrorCode\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"BondingCurveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"adminFee\",\"type\":\"uint96\"}],\"name\":\"DittoPoolMainAdminFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMainAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMainInvalidAdminFeeRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"basePrice\",\"type\":\"uint128\"}],\"name\":\"DittoPoolMainInvalidBasePrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"delta\",\"type\":\"uint128\"}],\"name\":\"DittoPoolMainInvalidDelta\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMainInvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMainInvalidPermitterData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"lpFee\",\"type\":\"uint96\"}],\"name\":\"DittoPoolMainLpFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMainNoDirectNftTransfers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMarketMakeInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMarketMakeInvalidNftTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMarketMakeMustDepositLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMarketMakeNotAuthorizedForLpId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolMarketMakeWrongPoolForLpId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeInTooManyTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeInsufficientBalanceToBuyNft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeInsufficientBalanceToPayFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeInvalidTokenRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeInvalidTokenSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeMustAskForMoreThanZeroNfts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeNftAndLpIdsMustBeSameLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"DittoPoolTradeNftNotOwnedByPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeNoNftsProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DittoPoolTradeOutTooFewTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerTwoStepNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerTwoStepNotPendingOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"AdminChangedAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminFeeRecipient\",\"type\":\"address\"}],\"name\":\"AdminChangedAdminFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newBasePrice\",\"type\":\"uint128\"}],\"name\":\"AdminChangedBasePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDelta\",\"type\":\"uint128\"}],\"name\":\"AdminChangedDelta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"AdminChangedLpFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newBasePrice\",\"type\":\"uint128\"}],\"name\":\"BasePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDelta\",\"type\":\"uint128\"}],\"name\":\"DeltaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDepositAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnerTwoStepOwnerRenouncedOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"OwnerTwoStepOwnerStartedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTwoStepOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerTwoStepPendingOwnerAcceptedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"delta\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"basePrice\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"lpIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAdmin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeProtocol\",\"type\":\"uint256\"}],\"name\":\"SwappedNftsForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sellerlpIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAdmin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeProtocol\",\"type\":\"uint256\"}],\"name\":\"SwappedTokensForNfts\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIdList_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenDepositAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitterData_\",\"type\":\"bytes\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"feeAdmin_\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingCurve\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"curve\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"newFeeAdmin_\",\"type\":\"uint96\"}],\"name\":\"changeAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminFeeRecipient_\",\"type\":\"address\"}],\"name\":\"changeAdminFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newBasePrice_\",\"type\":\"uint128\"}],\"name\":\"changeBasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newDelta_\",\"type\":\"uint128\"}],\"name\":\"changeDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"newFeeLp_\",\"type\":\"uint96\"}],\"name\":\"changeLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpRecipient_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIdList_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenDepositAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitterData_\",\"type\":\"bytes\"}],\"name\":\"createLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dittoPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLpIdTokenBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct LpIdToTokenBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolHeldNftIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolLpIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lpIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numNfts_\",\"type\":\"uint256\"}],\"name\":\"getBuyNftQuote\",\"outputs\":[{\"internalType\":\"enum CurveErrorCode\",\"name\":\"error\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newBasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"}],\"internalType\":\"struct Fee\",\"name\":\"fee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"buyPriceAndLpFeePerNft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"getLpIdForNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpNft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpId_\",\"type\":\"uint256\"}],\"name\":\"getNftCountForLpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpId_\",\"type\":\"uint256\"}],\"name\":\"getNftIdsForLpId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotalNftBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotalTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numNfts_\",\"type\":\"uint256\"}],\"name\":\"getSellNftQuote\",\"outputs\":[{\"internalType\":\"enum CurveErrorCode\",\"name\":\"error\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newBasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"}],\"internalType\":\"struct Fee\",\"name\":\"fee\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"sellPricePerNftIgnoreLpFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpId_\",\"type\":\"uint256\"}],\"name\":\"getTokenBalanceForLpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpId_\",\"type\":\"uint256\"}],\"name\":\"getTotalBalanceForLpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeLp\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeAdmin\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"delta\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"basePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initialTokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct CreatePoolParams\",\"name\":\"params_\",\"type\":\"tuple\"},{\"internalType\":\"contract LpNft\",\"name\":\"lpNft_\",\"type\":\"address\"},{\"internalType\":\"contract IPermitter\",\"name\":\"permitter_\",\"type\":\"address\"}],\"name\":\"initPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"feeLp_\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitter\",\"outputs\":[{\"internalType\":\"contract IPermitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeProtocol_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawalAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIdList_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenWithdrawAmount_\",\"type\":\"uint256\"}],\"name\":\"pullLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lpIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minExpectedTokenOutput_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftSender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenRecipient_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitterData_\",\"type\":\"bytes\"}],\"name\":\"swapNftsForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxExpectedTokenInput_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenSender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftRecipient_\",\"type\":\"address\"}],\"name\":\"swapTokensForNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"only callable by the pending owner that is accepting the new ownership.\"},\"addLiquidity(uint256,uint256[],uint256,bytes)\":{\"details\":\"Anybody may add liquidity to existing LP Positions, regardless of whether they own the position or not.This function expects that this contract has permission to move NFTs and tokens to itself from the msg.sender.\",\"params\":{\"lpId_\":\"TokenId of existing LP position to add liquidity to. Does not have to be owned by msg.sender!\",\"nftIdList_\":\"The list of NFT tokenIds msg.sender wishes to deposit into the pool.\",\"permitterData_\":\"Data to check that the NFT Token IDs are permitted to deposited into this pool if a permitter is set.\",\"tokenDepositAmount_\":\"The amount of ERC20 tokens msg.sender wishes to deposit into the pool.\"}},\"adminFee()\":{\"returns\":{\"feeAdmin_\":\"the fee associated with trading with any pair of this pool\"}},\"adminFeeRecipient()\":{\"returns\":{\"_0\":\"adminFeeRecipient The admin fee recipient of this pool\"}},\"basePrice()\":{\"returns\":{\"_0\":\"this pool's current base price\"}},\"bondingCurve()\":{\"returns\":{\"curve\":\"type of curve\"}},\"changeAdminFee(uint96)\":{\"params\":{\"newFeeAdmin_\":\"New fee, in wei / 1e18, charged by the pool for trades with it (i.e. 1% = 0.01e18)\"}},\"changeAdminFeeRecipient(address)\":{\"params\":{\"newAdminFeeRecipient_\":\"New address to send admin fees to\"}},\"changeBasePrice(uint128)\":{\"params\":{\"newBasePrice_\":\"The updated base price\"}},\"changeDelta(uint128)\":{\"params\":{\"newDelta_\":\"The updated delta\"}},\"changeLpFee(uint96)\":{\"params\":{\"newFeeLp_\":\"New fee, in wei / 1e18, charged by the pool for trades with it (i.e. 1% = 0.01e18)\"}},\"createLiquidity(address,uint256[],uint256,bytes)\":{\"details\":\"Provides the liquidity provider with a new liquidity position tracking NFT every time. This function assumes that msg.sender is the owner of the NFTs and Tokens.This function expects that this contract has permission to move NFTs and tokens to itself from the owner.The **lpRecipient_** parameter to this function is intended to allow creating positions on behalf of another party. msg.sender can send nfts and tokens to the pool and then have the pool create the liquidity position for someone who is not msg.sender. The `DittoPoolFactory` uses this feature to create a new DittoPool and deposit liquidity into it in one step. NFTs flow from user -> factory -> pool and then lpRecipient_ is set to the user.`lpRecipient_` can steal liquidity deposited by msg.sender if lpRecipient_ is not set to msg.sender.\",\"params\":{\"lpRecipient_\":\"The address that will receive the LP position ownership NFT.\",\"nftIdList_\":\"The list of NFT tokenIds msg.sender wishes to deposit into the pool.\",\"permitterData_\":\"Data to check that the NFT Token IDs are permitted to deposited into this pool if a permitter is set.\",\"tokenDepositAmount_\":\"The amount of ERC20 tokens msg.sender wishes to deposit into the pool.\"},\"returns\":{\"lpId\":\"The tokenId of the LP position NFT that was minted as a result of this liquidity deposit.\"}},\"delta()\":{\"returns\":{\"_0\":\"The delta parameter for the bonding curve of this pool\"}},\"dittoPoolFactory()\":{\"returns\":{\"_0\":\"dittoPoolFactory the ditto pool factory for the contract\"}},\"fee()\":{\"returns\":{\"fee_\":\"the total fee(s) associated with this pool, for display purposes.\"}},\"getAllLpIdTokenBalances()\":{\"details\":\"this function is not gas efficient and almost certainly should never actually be used on chain\",\"returns\":{\"balances\":\"the list of all LP Position NFT Token Ids and the amount of ERC20 tokens they are apportioned in the pool\"}},\"getAllPoolHeldNftIds()\":{\"details\":\"does not have to match what the underlying NFT contract balanceOf(dittoPool) thinks is owned by this pool: this is only valid liquidity tradeable in this pool NFTs can be lost by unsafe transferring them to a dittoPool also this function is O(n) gas efficient, only really meant to be used off-chain\",\"returns\":{\"_0\":\"nftIds the list of all NFT Token Ids in this pool, across all liquidity positions\"}},\"getAllPoolLpIds()\":{\"returns\":{\"lpIds\":\"the list of all LP Position NFT Token Ids corresponding to liquidity in this pool\"}},\"getBuyNftQuote(uint256)\":{\"params\":{\"numNfts\":\"The number of NFTs to buy out of the pair\"},\"returns\":{\"buyPriceAndLpFeePerNft\":\"the price of the NFTs plus the LP fee\",\"error\":\"any errors that would be throw if trying to buy that many NFTs\",\"fee\":\"Lp, Admin, and Protocol fees that will be charged to the trader\",\"inputAmount\":\"the amount of token to send to the pool to purchase that many NFTs\",\"newBasePrice\":\"the new base price after the trade\",\"newDelta\":\"the new delta after the trade\"}},\"getLpIdForNftId(uint256)\":{\"details\":\"this function mimics mappings: an invalid NFT token Id will return 0 rather than throwing for being invalid\",\"params\":{\"nftId_\":\"an NFT token Id that is owned by a liquidity provider in this pool\"},\"returns\":{\"lpId\":\"the Lp Position NFT token Id that owns the NFT token Id\"}},\"getLpNft()\":{\"returns\":{\"_0\":\"lpNft The LP Position NFT collection for this pool\"}},\"getNftCountForLpId(uint256)\":{\"params\":{\"lpId_\":\"a user providing liquidity to this pool for trading with\"},\"returns\":{\"_0\":\"userNftCount the number of NFTs in this pool owned by the liquidity provider\"}},\"getNftIdsForLpId(uint256)\":{\"details\":\"This function is not gas efficient and not-meant to be used on chain, only as a convenience for off-chain.worst-case is O(n) over the length of all the NFTs owned by the pool\",\"params\":{\"lpId_\":\"an LP position NFT token Id for a user providing liquidity to this pool\"},\"returns\":{\"nftIds\":\"the list of NFT tokenIds in this pool that are owned by the specific liquidity provider\"}},\"getPoolTotalNftBalance()\":{\"details\":\"Returns the number of NFTs owned by the pool\",\"returns\":{\"_0\":\"nftBalance_ The number of NFTs owned by the pool\"}},\"getPoolTotalTokenBalance()\":{\"details\":\"may not match the underlying ERC20 contract balanceOf() because of unsafe transfers this is only accounting for valid liquidity tradeable in the poolthis function is not gas efficient and almost certainly should never actually be used on chain\",\"returns\":{\"totalTokenBalance\":\"totalPoolTokenBalance the amount of ERC20 tokens the pool thinks it owns\"}},\"getSellNftQuote(uint256)\":{\"params\":{\"numNfts\":\"The number of NFTs to sell into the pair\"},\"returns\":{\"error\":\"any errors that would be throw if trying to sell that many NFTs\",\"fee\":\"Lp, Admin, and Protocol fees that will be charged to the trader\",\"newBasePrice\":\"the new base price after the trade\",\"newDelta\":\"the new delta after the trade\",\"outputAmount\":\"the amount of tokens the pool will send out for selling that many NFTs\",\"sellPricePerNftIgnoreLpFee\":\"the price of the NFTs less the LP/protocol/admin fee(s)\"}},\"getTokenBalanceForLpId(uint256)\":{\"details\":\"this function mimics mappings: an invalid lpId_ will return 0 rather than throwing for being invalid\",\"params\":{\"lpId_\":\"LP Position NFT token ID to query for\"},\"returns\":{\"tokenBalance\":\"lpTokenBalance the amount of ERC20 tokens the liquidity provider has in the pool\"}},\"getTotalBalanceForLpId(uint256)\":{\"details\":\"this function mimics mappings: an invalid lpId_ will return (0,0) rather than throwing for being invalid\",\"params\":{\"lpId_\":\"a user providing liquidity to this pool for trading with\"},\"returns\":{\"nftBalance\":\"the number of NFTs in this pool owned by the liquidity provider\",\"tokenBalance\":\"the amount of ERC20 tokens the liquidity provider has in the pool\"}},\"initPool((address,address,uint96,address,uint96,uint128,uint128,uint256[],uint256),address,address)\":{\"details\":\"Necessarily separate from constructor due to [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167) factory clone paradigm.Set permitter to address(0) to allow any tokenIds from the underlying NFT collection.\",\"params\":{\"lpNft_\":\"The Liquidity Provider Positions NFT contract that tokenizes liquidity provisions in the protocol\",\"params\":\"A struct that contains various initialization parameters for the pool. See `CreatePoolParams.sol` for details.\",\"permitter_\":\"Contract to authorize which tokenIds from the underlying nft collection are allowed to be traded in this pool.\"}},\"initialized()\":{\"details\":\"see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167) factory clone paradigm and also `DittoPoolFactory.sol`\",\"returns\":{\"_0\":\"initialized whether the contract has been initialized\"}},\"lpFee()\":{\"returns\":{\"feeLp_\":\"the fee associated with trading with a particular pair of this pool.\"}},\"nft()\":{\"returns\":{\"_0\":\"the address of the underlying nft collection contract\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"see [ERC-721](https://eips.ethereum.org/EIPS/eip-721) for details\"},\"owner()\":{\"returns\":{\"_0\":\"owner The current owner address\"}},\"pendingOwner()\":{\"details\":\"The pending address is 0 when there is no transfer of owner in progress\",\"returns\":{\"_0\":\"pendingOwner The pending owner address, if any\"}},\"permitter()\":{\"details\":\"if this address is zero, then all NFTs from the underlying collection are allowed to be traded in this pool\",\"returns\":{\"_0\":\"permitter the address of this pool's permitter contract, or zero if no permitter is set\"}},\"protocolFee()\":{\"returns\":{\"feeProtocol_\":\"the protocol fee associated with trading with this pool\"}},\"pullLiquidity(address,uint256,uint256[],uint256)\":{\"details\":\"Can be called to change an existing liquidity position, or remove an LP position by withdrawing all liquidity.May be called by an authorized party (approved on the LP NFT) to withdraw liquidity on behalf of the LP Position owner.\",\"params\":{\"lpId_\":\"LP Position TokenID that liquidity is being removed from. Does not have to be owned by msg.sender if the msg.sender is authorized.\",\"nftIdList_\":\"The list of NFT tokenIds msg.sender wishes to withdraw from the pool.\",\"tokenWithdrawAmount_\":\"The amount of ERC20 tokens the msg.sender wishes to withdraw from the pool.\",\"withdrawalAddress_\":\"the address that will receive the ERC20 tokens and NFTs withdrawn from the pool.\"}},\"swapNftsForTokens(uint256[],uint256[],uint256,address,address,bytes)\":{\"details\":\"To compute the amount of token to that will be received, call bondingCurve.getSellInfo.Key difference with sudoswap here: In sudoswap, each market maker has a separate smart contract with their liquidity. To sell to a market maker, you just check if their specific `LSSVMPair` contract has enough money. In DittoSwap, we share different market makers' liquidity in the same pool contract. So this function has an additional parameter `lpIds` forcing the buyer to check off-chain which market maker's LP position that they want to trade with, for each specific NFT that they are selling into the pool. The lpIds array should correspond with the nftIds array in the same order & indexes. e.g. to sell NFT with tokenId 1337 to the market maker who's LP position has id 42, the buyer would call this function with nftIds = [1337] and lpIds = [42].\",\"params\":{\"lpIds_\":\"The list of IDs of the LP positions sell the NFTs to\",\"minExpectedTokenOutput_\":\"The minimum acceptable token count received by the sender.    If the actual amount is less than this value, the transaction will be reverted.\",\"nftIds_\":\"The list of IDs of the NFTs to sell to the pair\",\"nftSender_\":\"NFT sender. Only used if msg.sender is an approved IDittoRouter, else msg.sender is used.\",\"permitterData_\":\"Data to profe that the NFT Token IDs are permitted to be sold to this pool if a permitter is set.\",\"tokenRecipient_\":\"The recipient of the ERC20 proceeds.\"},\"returns\":{\"outputAmount\":\"The amount of token received\"}},\"swapTokensForNfts(uint256[],uint256,address,address)\":{\"details\":\"To compute the amount of token to send, call bondingCurve.getBuyInfo This swap is meant for users who want specific IDs. \",\"params\":{\"maxExpectedTokenInput_\":\"The maximum acceptable cost from the sender (in wei or base units of ERC20). If the actual amount is greater than this value, the transaction will be reverted.\",\"nftIds_\":\"The list of IDs of the NFTs to purchase\",\"nftRecipient_\":\"Address to send the purchased NFTs to.\",\"tokenSender_\":\"ERC20 sender. Only used if msg.sender is an approved IDittoRouter, else msg.sender is used.\"},\"returns\":{\"inputAmount\":\"The actual amount of tokens spent to purchase the NFTs.\"}},\"token()\":{\"returns\":{\"_0\":\"The address of the ERC20 token that this pool is trading NFTs against.\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner_\":\"The address of the new owner\"}}},\"title\":\"DittoPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Completes the transfer process to a new owner.\"},\"addLiquidity(uint256,uint256[],uint256,bytes)\":{\"notice\":\"Function for market makers / liquidity providers to deposit NFTs and ERC20s into existing LP Positions.\"},\"adminFee()\":{\"notice\":\"Returns the admin fee given to the pool admin as a 1e18 based percentage.\"},\"adminFeeRecipient()\":{\"notice\":\"Returns the address that recieves admin fees from trades with this pool\"},\"basePrice()\":{\"notice\":\"Returns the base price to sell the next NFT into this pool, base+delta to buy Each bonding curve uses base price differently, but in general it is used as the current price of the pool.\"},\"bondingCurve()\":{\"notice\":\"For use in tokenURI function metadata\"},\"changeAdminFee(uint96)\":{\"notice\":\"Change the pool admin fee, set by owner, paid to an address of the owner's choosing\"},\"changeAdminFeeRecipient(address)\":{\"notice\":\"Change who the pool admin fee for this pool is sent to.\"},\"changeBasePrice(uint128)\":{\"notice\":\"Admin function to change the base price charged to buy an NFT from the pair. Each bonding curve uses this differently.\"},\"changeDelta(uint128)\":{\"notice\":\"Admin function to change the delta parameter associated with the bonding curve. Each bonding curve uses this differently. \"},\"changeLpFee(uint96)\":{\"notice\":\"Admin function to change the pool lp fee, set by owner, paid to LPers only when they are the counterparty in a trade\"},\"createLiquidity(address,uint256[],uint256,bytes)\":{\"notice\":\"Function for liquidity providers to create new Liquidity Positions within the pool by depositing liquidity.\"},\"delta()\":{\"notice\":\"Returns the delta parameter for the bonding curve associated this pool Each bonding curve uses delta differently, but in general it is used as an input   to determine the next price on the bonding curve.\"},\"dittoPoolFactory()\":{\"notice\":\"Returns the factory that created this pool.\"},\"fee()\":{\"notice\":\"Returns the cumulative fee associated with trading with this pool as a 1e18 based percentage.\"},\"getAllLpIdTokenBalances()\":{\"notice\":\"returns the enumerated list of all token balances for all LP positions in this pool\"},\"getAllPoolHeldNftIds()\":{\"notice\":\"returns the full list of all NFT tokenIds that are owned by this pool\"},\"getAllPoolLpIds()\":{\"notice\":\"returns the full list of all LP Position NFT tokenIds that represent liquidity in this pool\"},\"getBuyNftQuote(uint256)\":{\"notice\":\"Read-only function used to query the bonding curve for buy pricing info.\"},\"getLpIdForNftId(uint256)\":{\"notice\":\"returns the Lp Position NFT token Id that owns a specific NFT token Id in this pool\"},\"getLpNft()\":{\"notice\":\"Returns the NFT collection that represents liquidity positions in this pool\"},\"getNftCountForLpId(uint256)\":{\"notice\":\"returns the number of NFTs owned by a specific liquidity provider in this pool\"},\"getNftIdsForLpId(uint256)\":{\"notice\":\"Returns the full list of NFT tokenIds that are owned by a specific liquidity provider in this pool\"},\"getPoolTotalTokenBalance()\":{\"notice\":\"returns the full amount of all ERC20 tokens that the pool thinks it owns\"},\"getSellNftQuote(uint256)\":{\"notice\":\"Read-only function used to query the bonding curve for sell pricing info\"},\"getTokenBalanceForLpId(uint256)\":{\"notice\":\"Returns how many ERC20 tokens a liquidity provider has in the pool\"},\"getTotalBalanceForLpId(uint256)\":{\"notice\":\"returns the number of NFTs and number of ERC20s owned by a specific liquidity provider in this pool pretty much equivalent to the user's liquidity position in non-nft form.\"},\"initPool((address,address,uint96,address,uint96,uint128,uint128,uint256[],uint256),address,address)\":{\"notice\":\"Used by the Contract Factory to set the initial state & parameters of the pool.\"},\"initialized()\":{\"notice\":\"returns the status of whether this contract has been initialized\"},\"lpFee()\":{\"notice\":\"Returns the fee given to liquidity providers for trading with this pool.\"},\"nft()\":{\"notice\":\"Returns the nft collection that this pool trades \"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"function called on SafeTransferFrom of NFTs to this contract\"},\"owner()\":{\"notice\":\"Getter function to find out the current owner address\"},\"pendingOwner()\":{\"notice\":\"Getter function to find out the pending owner address\"},\"permitter()\":{\"notice\":\"Returns the permitter contract that allows or denies specific NFT tokenIds to be traded in this pool\"},\"protocolFee()\":{\"notice\":\"Returns the protocol fee associated with trading with this pool as a 1e18 based percentage.\"},\"pullLiquidity(address,uint256,uint256[],uint256)\":{\"notice\":\"Function for liquidity providers to withdraw NFTs and ERC20 tokens from their LP positions.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.\"},\"swapNftsForTokens(uint256[],uint256[],uint256,address,address,bytes)\":{\"notice\":\"Trade a list of allowed nft ids for ERC20s.\"},\"swapTokensForNfts(uint256[],uint256,address,address)\":{\"notice\":\"Trade ERC20s for a specific list of NFT token ids.\"},\"token()\":{\"notice\":\"Returns the address of the ERC20 token that this pool is trading NFTs against.\"},\"transferOwnership(address)\":{\"notice\":\"Starts the ownership transfer of the contract to a new account. Replaces the    pending transfer if there is one. \"}},\"notice\":\"DittoPool AMM shared liquidity trading pools. See DittoPoolMain, MarketMake and Trade for implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pool/DittoPool.sol\":\"DittoPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@manifoldxyz/libraries-solidity/=lib/manifold-libraries-solidity/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":manifold-libraries-solidity/=lib/manifold-libraries-solidity/contracts/\",\":manifoldxyz/=lib/manifoldxyz/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/interface/IDittoPool.sol\":{\"keccak256\":\"0xc09c9292012cf72897a8a6cf2bc41fe715810df18850c1faa2ed4a9bd291429d\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://f14f9c2090b5e3f223cf973ec217be8e36d6e2fe13e676f2a8f3328c649fc98e\",\"dweb:/ipfs/QmVr3QjUYwcLALq857zfJaPjbeLyoDWrDQoR6VdKBtJEED\"]},\"contracts/interface/IDittoPoolFactory.sol\":{\"keccak256\":\"0x9261b4348eea75436bdfa2315bba17efff068825ae9685a0c363f15839d0a00d\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://fb2027959eb75ef5a7305b2d085d2225805934cf676dd349d52dd645f5990320\",\"dweb:/ipfs/QmeJaryQSjAveqVEd4ZRCyQtQiiWhZtnLFvQxAdKNmApFb\"]},\"contracts/interface/IDittoRouter.sol\":{\"keccak256\":\"0xe975ff50b66c415f948b57ed1b24fd59e1757790ae50af2de1edd3787ac19cc4\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://ba2651c3b5045f0d570ae7c1dc5f1cde76e0e68425bf5f49086f49f8b65e8b81\",\"dweb:/ipfs/QmarPbmuT27ya6vpxSTi4Q9iogj8BHJ3srzbrKDEpXrETS\"]},\"contracts/interface/IERC4906.sol\":{\"keccak256\":\"0x46d979bbdde21c449478c35c936fcfbc562f2224b3098d9d6355fe26732ab3fc\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://07d83dd9bed4f335f741576b05c06299c5335305c941440e42e933e755ef2780\",\"dweb:/ipfs/Qmf8neZ64xW1LDPzb9UGB9QAL6BDhPoHU8cutgABBJGeqv\"]},\"contracts/interface/ILpNft.sol\":{\"keccak256\":\"0xb8d2a9e357fec1e88ed683fee4556ec9d2f75dd44ee06818c332ec0f17966f70\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://e44592be1c2b886327df6463483df85bd9565d4c3c5393b6788bc0326cff23ad\",\"dweb:/ipfs/QmRHqvmkXLSKGH8WR6Uzrqd3ZkrFSvkeMTPwxc8cs2cYJT\"]},\"contracts/interface/IMetadataGenerator.sol\":{\"keccak256\":\"0x4287225181943aacba4677f2b5a0b0992bfb0cd977b22e729b85f7b1789ec81e\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://e2cf03e808157ecad44969f7a9515b62b087d4914270ace3953a2d2189beec0e\",\"dweb:/ipfs/QmX2CgbMaxo2wFiLhHR6oXcuTH8AJUvxDnPisAPKUZoxrv\"]},\"contracts/interface/IOwnerTwoStep.sol\":{\"keccak256\":\"0x6e0fdfe76d1f673ecb2a0a9b181b713abda4c26db1d1aa1eabc9cd164fd4ae13\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://c29fe9fb52cc04b72967ccf9effadb6ed39af8e5d7e4e656999de05399b3f8a6\",\"dweb:/ipfs/QmdDLFeHDnDCsgNq7fctfmg9QF7wAMhURjYpqqEs3oYdHM\"]},\"contracts/interface/IPermitter.sol\":{\"keccak256\":\"0xf12fff7867fee0f5c992df0eba5a99a6c6f8178086c75b75e8493a534c2e8bac\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://a7b93d151b35ee067cdb548b5601b10c0573b96306f6605fe43298a4e1223a40\",\"dweb:/ipfs/Qme2qEx7TmVrJn298nTrbT9NihqTZWZgsSmgu5m7kzwWde\"]},\"contracts/interface/IPoolManager.sol\":{\"keccak256\":\"0x5e048176dd01211f2ceac0ffa8c72f6f1ebbeb23da9e364bfc51dd2e62d986cb\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://b558577bcad217b083c7b43cfda6a11d1590b83065dd22bcc9d7bf34b0f451fc\",\"dweb:/ipfs/QmaWctb9qWY3S5XWvCy1pqWvLo5DaZ58Pq7316Qh542nLF\"]},\"contracts/pool/DittoPool.sol\":{\"keccak256\":\"0x49361c2c8ff80ccb0595949d1cf7cbdafd9da6b5aa31cbc6c9837e70d7eab739\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://92059693d386fbe42c3a32f06f4d37cb97fa525a946c21ff309f73b01d2b8992\",\"dweb:/ipfs/QmVtkUbstYthowqF9YC6nDMyFMq3b7fCCxN3SAvcD5ERa5\"]},\"contracts/pool/DittoPoolMain.sol\":{\"keccak256\":\"0x8ecc7b89a7593312db1cda36393db18c665108ea5d746316ab7dcfff6ffb3c40\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://587bf227fddf8e6a2e34bac4e2445c7d946992b19ba59c58e9cac5ba4a9c4b9f\",\"dweb:/ipfs/QmcY299rw15o1dfs4oURxjDQTaDt4W2RreUVJiX93YDGRX\"]},\"contracts/pool/DittoPoolMarketMake.sol\":{\"keccak256\":\"0x65b0d46e97a602a8e343185723c8abd7f36b9fa2fcc7ed00b45039542d5d01d9\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://99525f74b6e0ea697e073013a334985ebf4676cd8f0cb985562ea4f88ef56509\",\"dweb:/ipfs/QmWtSQDoGz2SGdEmv5UrtrbzFQ4n2voynBcvy8APRXZiUi\"]},\"contracts/pool/DittoPoolTrade.sol\":{\"keccak256\":\"0xbab48cf76fbc0f49964f6443578d54513f5635104f67bfac8fb833e4aac7677d\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://d044b7f52a6bc9ac7197c36ea7674f586f8842e6ede7672f6fcaa119ca39b560\",\"dweb:/ipfs/QmfZt33p4jvH5ctD686xqoQA4TjyZ9dvdGwkvQ8Vc6pVFg\"]},\"contracts/pool/lpNft/LpNft.sol\":{\"keccak256\":\"0xb3a51d71b8f1accdb444b6369b50b129d744607d647fea1f80dbf2710cd014ad\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://9030dcc39443ea7fbd06565510aacf45ce8cf73c97381307ac359eef443f4549\",\"dweb:/ipfs/QmS166B2kKBFgq1cGRyg1Bx2EpgSYVDyVEq6JUTuHA7Nn1\"]},\"contracts/struct/CreatePoolParams.sol\":{\"keccak256\":\"0x66182ed66e6c3fd0efd4118573bf62acd20c7723a8b1c126eda540b6899b2c71\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://a7429b579152768f2bef1faee722c035afbc493e5cad6a2526d322f112b80a4b\",\"dweb:/ipfs/QmWviZoep4gJ61V6tt5u45Coweasqw61kDLdNyeSAhCiEg\"]},\"contracts/struct/FactoryTemplates.sol\":{\"keccak256\":\"0x5176be6ced6adfaa1f48b1916e3243c016a06e36cca26f1086083efeb974afa8\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://51a0d1b5122cef5810b0c20221011a2443f2f328c2594fc87b3fb4cc2e41670b\",\"dweb:/ipfs/QmQd4GzPnqkq4AgUWijwZBwB7KihAFMd9RJGYwhDJqN3nb\"]},\"contracts/struct/Fee.sol\":{\"keccak256\":\"0xdf4b1391b3a04444e2e6c0972b4018a13b689b987b4e46433b7456177e4b0919\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://b6c6806de568fbc86540a17ff378ec2d5564a5d8c10f498d4ac474eadedb464a\",\"dweb:/ipfs/QmVupx7dW3btg7KzCGKFhs6DGdgvd7gPyyCVnSQK2TffVy\"]},\"contracts/struct/LpIdToTokenBalance.sol\":{\"keccak256\":\"0x8b97694aa8901cc91067a54cfa3cc72c66c5330899d2758b205a55f8d7bd3088\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://cdf72255ec0261c410779ac2dacceb30abc3a6380984a6bbfefc1a3a8af43315\",\"dweb:/ipfs/QmVwVNbLt6StWqT41prsnaVm6qrxEPs124fAAo7iWC4q7u\"]},\"contracts/struct/RouterStructs.sol\":{\"keccak256\":\"0x46b188f7fdf86acf397d5a668cfb0a11c06bfe272e934bf384a437b2ef85fef8\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://e12b9ced1da039212eb66d7a21464faacf3a976464656f080887cef5a7301720\",\"dweb:/ipfs/QmWEGN5GwQpg84YP2X8w7N18HYXgTxhttNNCZCa4NTqRGn\"]},\"contracts/utils/CurveErrorCode.sol\":{\"keccak256\":\"0xfd7b43238740afdaa872ce99c113a78f65a491bf3e9aab5d8e0455f659224de4\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://7acfc6b639b287c22b28cdf7e0edd5e1f85f31ecbebbd0150929797a3a197c36\",\"dweb:/ipfs/QmcD1CrAFpuKeS9HPfTwFnWfASWMJH1y7dsQmZSpxFsPjR\"]},\"contracts/utils/OwnerTwoStep.sol\":{\"keccak256\":\"0x931c6dc10a05c55f138e8fc5308409ba073471b4c5ce91465a4c071376c38641\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://89241228e8028366e215de386590e9463e04c36fcc2ce1ca0b88fb7ab2356062\",\"dweb:/ipfs/QmcxojNRtkCxNxa8a3vSvXTvZSxudQyHUgxvWgSBBNYRrf\"]},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b\",\"dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol\":{\"keccak256\":\"0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a55fbc9ee8080ec3b397e8e32e5dafcff2c377ce44d553bfc93dfce1be2d5b12\",\"dweb:/ipfs/QmYSk6bNHnpKRyNWXmEBKbkPxXi7Hco9JZHHyxMdrZGWpb\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e\",\"dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35\"]},\"lib/solmate/src/tokens/ERC20.sol\":{\"keccak256\":\"0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://49a39e71d6bde571d04722c90fd42591af806d29d8cbd4cd96f35e443702d899\",\"dweb:/ipfs/QmefLxMt6w2it9daQQFdBTtPeCWDhSqhNWuxQy8e7WrNVr\"]},\"lib/solmate/src/tokens/ERC721.sol\":{\"keccak256\":\"0x9efdbd33281a819df5174ae858ab68910bffc6fdf6daf82229b1d335c03d788f\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://14a3b5dde1f2e1d6ee85fcf229cac0f62e20feda6ceff824e6383774fe2b0686\",\"dweb:/ipfs/QmRwtQy9znd7se79jQUEgvAUvNEegbDnoeVSdEfH3yUHiR\"]},\"lib/solmate/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://a18e34690286eeb9d24e4913b8bb2e437fde3273d955b0ea06db6394244248ed\",\"dweb:/ipfs/QmYokhGtqtWP6Me7Z5hifWXBBBFcfr2EHNWSRCFmr9eZ7S\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "enum CurveErrorCode",
              "name": "error",
              "type": "uint8"
            }
          ],
          "type": "error",
          "name": "BondingCurveError"
        },
        {
          "inputs": [
            {
              "internalType": "uint96",
              "name": "adminFee",
              "type": "uint96"
            }
          ],
          "type": "error",
          "name": "DittoPoolMainAdminFeeTooHigh"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMainAlreadyInitialized"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMainInvalidAdminFeeRecipient"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "basePrice",
              "type": "uint128"
            }
          ],
          "type": "error",
          "name": "DittoPoolMainInvalidBasePrice"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "delta",
              "type": "uint128"
            }
          ],
          "type": "error",
          "name": "DittoPoolMainInvalidDelta"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMainInvalidFee"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMainInvalidPermitterData"
        },
        {
          "inputs": [
            {
              "internalType": "uint96",
              "name": "lpFee",
              "type": "uint96"
            }
          ],
          "type": "error",
          "name": "DittoPoolMainLpFeeTooHigh"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMainNoDirectNftTransfers"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMarketMakeInsufficientBalance"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMarketMakeInvalidNftTokenId"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMarketMakeMustDepositLiquidity"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMarketMakeNotAuthorizedForLpId"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolMarketMakeWrongPoolForLpId"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeInTooManyTokens"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeInsufficientBalanceToBuyNft"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeInsufficientBalanceToPayFees"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeInvalidTokenRecipient"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeInvalidTokenSender"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeMustAskForMoreThanZeroNfts"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeNftAndLpIdsMustBeSameLength"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "DittoPoolTradeNftNotOwnedByPool"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeNoNftsProvided"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DittoPoolTradeOutTooFewTokens"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerTwoStepNotOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerTwoStepNotPendingOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFee",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AdminChangedAdminFee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "adminFeeRecipient",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AdminChangedAdminFeeRecipient",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "newBasePrice",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AdminChangedBasePrice",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "newDelta",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AdminChangedDelta",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newFee",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AdminChangedLpFee",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "newBasePrice",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BasePriceChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "newDelta",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DeltaChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "liquidityProvider",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "lpId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "tokenDepositAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LiquidityAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "lpId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "tokenWithdrawAmount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "LiquidityRemoved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OwnerTwoStepOwnerRenouncedOwnership",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "currentOwner",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "newPendingOwner",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OwnerTwoStepOwnerStartedTransfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OwnerTwoStepOwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OwnerTwoStepPendingOwnerAcceptedTransfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "delta",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "basePrice",
              "type": "uint128",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "PoolInitialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "nftRecipient",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "nftIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "lpIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "outputAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "feeLp",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "feeAdmin",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "feeProtocol",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SwappedNftsForTokens",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "nftRecipient",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "nftIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256[]",
              "name": "sellerlpIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "feeLp",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "feeAdmin",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "feeProtocol",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "SwappedTokensForNfts",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "lpId_",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIdList_",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "tokenDepositAmount_",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "permitterData_",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addLiquidity"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "adminFee",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "feeAdmin_",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "adminFeeRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "basePrice",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "bondingCurve",
          "outputs": [
            {
              "internalType": "string",
              "name": "curve",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint96",
              "name": "newFeeAdmin_",
              "type": "uint96"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeAdminFee"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newAdminFeeRecipient_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeAdminFeeRecipient"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "newBasePrice_",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeBasePrice"
        },
        {
          "inputs": [
            {
              "internalType": "uint128",
              "name": "newDelta_",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeDelta"
        },
        {
          "inputs": [
            {
              "internalType": "uint96",
              "name": "newFeeLp_",
              "type": "uint96"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "changeLpFee"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "lpRecipient_",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIdList_",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "tokenDepositAmount_",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "permitterData_",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createLiquidity",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "lpId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "delta",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "dittoPoolFactory",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "fee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "fee_",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAllLpIdTokenBalances",
          "outputs": [
            {
              "internalType": "struct LpIdToTokenBalance[]",
              "name": "balances",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "lpId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenBalance",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAllPoolHeldNftIds",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAllPoolLpIds",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "lpIds",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "numNfts_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBuyNftQuote",
          "outputs": [
            {
              "internalType": "enum CurveErrorCode",
              "name": "error",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "newBasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newDelta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            },
            {
              "internalType": "struct Fee",
              "name": "fee",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "lp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "admin",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "protocol",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "buyPriceAndLpFeePerNft",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "nftId_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getLpIdForNftId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "lpId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getLpNft",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "lpId_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getNftCountForLpId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "lpId_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getNftIdsForLpId",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "nftIds",
              "type": "uint256[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getPoolTotalNftBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getPoolTotalTokenBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "totalTokenBalance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "numNfts_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSellNftQuote",
          "outputs": [
            {
              "internalType": "enum CurveErrorCode",
              "name": "error",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "newBasePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newDelta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "outputAmount",
              "type": "uint256"
            },
            {
              "internalType": "struct Fee",
              "name": "fee",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "lp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "admin",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "protocol",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "sellPricePerNftIgnoreLpFee",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "lpId_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTokenBalanceForLpId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "lpId_",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalBalanceForLpId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftBalance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct CreatePoolParams",
              "name": "params_",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "nft",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeLp",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "feeAdmin",
                  "type": "uint96"
                },
                {
                  "internalType": "uint128",
                  "name": "delta",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "basePrice",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256[]",
                  "name": "nftIdList",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "initialTokenBalance",
                  "type": "uint256"
                }
              ]
            },
            {
              "internalType": "contract LpNft",
              "name": "lpNft_",
              "type": "address"
            },
            {
              "internalType": "contract IPermitter",
              "name": "permitter_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initPool"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "initialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "lpFee",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "feeLp_",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nft",
          "outputs": [
            {
              "internalType": "contract IERC721",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onERC721Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pendingOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "permitter",
          "outputs": [
            {
              "internalType": "contract IPermitter",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "protocolFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "feeProtocol_",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "withdrawalAddress_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lpId_",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "nftIdList_",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "tokenWithdrawAmount_",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pullLiquidity"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "nftIds_",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "lpIds_",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "minExpectedTokenOutput_",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftSender_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenRecipient_",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "permitterData_",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapNftsForTokens",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "outputAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "nftIds_",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "maxExpectedTokenInput_",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenSender_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftRecipient_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapTokensForNfts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "inputAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "token",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newPendingOwner_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptOwnership()": {
            "details": "only callable by the pending owner that is accepting the new ownership."
          },
          "addLiquidity(uint256,uint256[],uint256,bytes)": {
            "details": "Anybody may add liquidity to existing LP Positions, regardless of whether they own the position or not.This function expects that this contract has permission to move NFTs and tokens to itself from the msg.sender.",
            "params": {
              "lpId_": "TokenId of existing LP position to add liquidity to. Does not have to be owned by msg.sender!",
              "nftIdList_": "The list of NFT tokenIds msg.sender wishes to deposit into the pool.",
              "permitterData_": "Data to check that the NFT Token IDs are permitted to deposited into this pool if a permitter is set.",
              "tokenDepositAmount_": "The amount of ERC20 tokens msg.sender wishes to deposit into the pool."
            }
          },
          "adminFee()": {
            "returns": {
              "feeAdmin_": "the fee associated with trading with any pair of this pool"
            }
          },
          "adminFeeRecipient()": {
            "returns": {
              "_0": "adminFeeRecipient The admin fee recipient of this pool"
            }
          },
          "basePrice()": {
            "returns": {
              "_0": "this pool's current base price"
            }
          },
          "bondingCurve()": {
            "returns": {
              "curve": "type of curve"
            }
          },
          "changeAdminFee(uint96)": {
            "params": {
              "newFeeAdmin_": "New fee, in wei / 1e18, charged by the pool for trades with it (i.e. 1% = 0.01e18)"
            }
          },
          "changeAdminFeeRecipient(address)": {
            "params": {
              "newAdminFeeRecipient_": "New address to send admin fees to"
            }
          },
          "changeBasePrice(uint128)": {
            "params": {
              "newBasePrice_": "The updated base price"
            }
          },
          "changeDelta(uint128)": {
            "params": {
              "newDelta_": "The updated delta"
            }
          },
          "changeLpFee(uint96)": {
            "params": {
              "newFeeLp_": "New fee, in wei / 1e18, charged by the pool for trades with it (i.e. 1% = 0.01e18)"
            }
          },
          "createLiquidity(address,uint256[],uint256,bytes)": {
            "details": "Provides the liquidity provider with a new liquidity position tracking NFT every time. This function assumes that msg.sender is the owner of the NFTs and Tokens.This function expects that this contract has permission to move NFTs and tokens to itself from the owner.The **lpRecipient_** parameter to this function is intended to allow creating positions on behalf of another party. msg.sender can send nfts and tokens to the pool and then have the pool create the liquidity position for someone who is not msg.sender. The `DittoPoolFactory` uses this feature to create a new DittoPool and deposit liquidity into it in one step. NFTs flow from user -> factory -> pool and then lpRecipient_ is set to the user.`lpRecipient_` can steal liquidity deposited by msg.sender if lpRecipient_ is not set to msg.sender.",
            "params": {
              "lpRecipient_": "The address that will receive the LP position ownership NFT.",
              "nftIdList_": "The list of NFT tokenIds msg.sender wishes to deposit into the pool.",
              "permitterData_": "Data to check that the NFT Token IDs are permitted to deposited into this pool if a permitter is set.",
              "tokenDepositAmount_": "The amount of ERC20 tokens msg.sender wishes to deposit into the pool."
            },
            "returns": {
              "lpId": "The tokenId of the LP position NFT that was minted as a result of this liquidity deposit."
            }
          },
          "delta()": {
            "returns": {
              "_0": "The delta parameter for the bonding curve of this pool"
            }
          },
          "dittoPoolFactory()": {
            "returns": {
              "_0": "dittoPoolFactory the ditto pool factory for the contract"
            }
          },
          "fee()": {
            "returns": {
              "fee_": "the total fee(s) associated with this pool, for display purposes."
            }
          },
          "getAllLpIdTokenBalances()": {
            "details": "this function is not gas efficient and almost certainly should never actually be used on chain",
            "returns": {
              "balances": "the list of all LP Position NFT Token Ids and the amount of ERC20 tokens they are apportioned in the pool"
            }
          },
          "getAllPoolHeldNftIds()": {
            "details": "does not have to match what the underlying NFT contract balanceOf(dittoPool) thinks is owned by this pool: this is only valid liquidity tradeable in this pool NFTs can be lost by unsafe transferring them to a dittoPool also this function is O(n) gas efficient, only really meant to be used off-chain",
            "returns": {
              "_0": "nftIds the list of all NFT Token Ids in this pool, across all liquidity positions"
            }
          },
          "getAllPoolLpIds()": {
            "returns": {
              "lpIds": "the list of all LP Position NFT Token Ids corresponding to liquidity in this pool"
            }
          },
          "getBuyNftQuote(uint256)": {
            "params": {
              "numNfts": "The number of NFTs to buy out of the pair"
            },
            "returns": {
              "buyPriceAndLpFeePerNft": "the price of the NFTs plus the LP fee",
              "error": "any errors that would be throw if trying to buy that many NFTs",
              "fee": "Lp, Admin, and Protocol fees that will be charged to the trader",
              "inputAmount": "the amount of token to send to the pool to purchase that many NFTs",
              "newBasePrice": "the new base price after the trade",
              "newDelta": "the new delta after the trade"
            }
          },
          "getLpIdForNftId(uint256)": {
            "details": "this function mimics mappings: an invalid NFT token Id will return 0 rather than throwing for being invalid",
            "params": {
              "nftId_": "an NFT token Id that is owned by a liquidity provider in this pool"
            },
            "returns": {
              "lpId": "the Lp Position NFT token Id that owns the NFT token Id"
            }
          },
          "getLpNft()": {
            "returns": {
              "_0": "lpNft The LP Position NFT collection for this pool"
            }
          },
          "getNftCountForLpId(uint256)": {
            "params": {
              "lpId_": "a user providing liquidity to this pool for trading with"
            },
            "returns": {
              "_0": "userNftCount the number of NFTs in this pool owned by the liquidity provider"
            }
          },
          "getNftIdsForLpId(uint256)": {
            "details": "This function is not gas efficient and not-meant to be used on chain, only as a convenience for off-chain.worst-case is O(n) over the length of all the NFTs owned by the pool",
            "params": {
              "lpId_": "an LP position NFT token Id for a user providing liquidity to this pool"
            },
            "returns": {
              "nftIds": "the list of NFT tokenIds in this pool that are owned by the specific liquidity provider"
            }
          },
          "getPoolTotalNftBalance()": {
            "details": "Returns the number of NFTs owned by the pool",
            "returns": {
              "_0": "nftBalance_ The number of NFTs owned by the pool"
            }
          },
          "getPoolTotalTokenBalance()": {
            "details": "may not match the underlying ERC20 contract balanceOf() because of unsafe transfers this is only accounting for valid liquidity tradeable in the poolthis function is not gas efficient and almost certainly should never actually be used on chain",
            "returns": {
              "totalTokenBalance": "totalPoolTokenBalance the amount of ERC20 tokens the pool thinks it owns"
            }
          },
          "getSellNftQuote(uint256)": {
            "params": {
              "numNfts": "The number of NFTs to sell into the pair"
            },
            "returns": {
              "error": "any errors that would be throw if trying to sell that many NFTs",
              "fee": "Lp, Admin, and Protocol fees that will be charged to the trader",
              "newBasePrice": "the new base price after the trade",
              "newDelta": "the new delta after the trade",
              "outputAmount": "the amount of tokens the pool will send out for selling that many NFTs",
              "sellPricePerNftIgnoreLpFee": "the price of the NFTs less the LP/protocol/admin fee(s)"
            }
          },
          "getTokenBalanceForLpId(uint256)": {
            "details": "this function mimics mappings: an invalid lpId_ will return 0 rather than throwing for being invalid",
            "params": {
              "lpId_": "LP Position NFT token ID to query for"
            },
            "returns": {
              "tokenBalance": "lpTokenBalance the amount of ERC20 tokens the liquidity provider has in the pool"
            }
          },
          "getTotalBalanceForLpId(uint256)": {
            "details": "this function mimics mappings: an invalid lpId_ will return (0,0) rather than throwing for being invalid",
            "params": {
              "lpId_": "a user providing liquidity to this pool for trading with"
            },
            "returns": {
              "nftBalance": "the number of NFTs in this pool owned by the liquidity provider",
              "tokenBalance": "the amount of ERC20 tokens the liquidity provider has in the pool"
            }
          },
          "initPool((address,address,uint96,address,uint96,uint128,uint128,uint256[],uint256),address,address)": {
            "details": "Necessarily separate from constructor due to [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167) factory clone paradigm.Set permitter to address(0) to allow any tokenIds from the underlying NFT collection.",
            "params": {
              "lpNft_": "The Liquidity Provider Positions NFT contract that tokenizes liquidity provisions in the protocol",
              "params": "A struct that contains various initialization parameters for the pool. See `CreatePoolParams.sol` for details.",
              "permitter_": "Contract to authorize which tokenIds from the underlying nft collection are allowed to be traded in this pool."
            }
          },
          "initialized()": {
            "details": "see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167) factory clone paradigm and also `DittoPoolFactory.sol`",
            "returns": {
              "_0": "initialized whether the contract has been initialized"
            }
          },
          "lpFee()": {
            "returns": {
              "feeLp_": "the fee associated with trading with a particular pair of this pool."
            }
          },
          "nft()": {
            "returns": {
              "_0": "the address of the underlying nft collection contract"
            }
          },
          "onERC721Received(address,address,uint256,bytes)": {
            "details": "see [ERC-721](https://eips.ethereum.org/EIPS/eip-721) for details"
          },
          "owner()": {
            "returns": {
              "_0": "owner The current owner address"
            }
          },
          "pendingOwner()": {
            "details": "The pending address is 0 when there is no transfer of owner in progress",
            "returns": {
              "_0": "pendingOwner The pending owner address, if any"
            }
          },
          "permitter()": {
            "details": "if this address is zero, then all NFTs from the underlying collection are allowed to be traded in this pool",
            "returns": {
              "_0": "permitter the address of this pool's permitter contract, or zero if no permitter is set"
            }
          },
          "protocolFee()": {
            "returns": {
              "feeProtocol_": "the protocol fee associated with trading with this pool"
            }
          },
          "pullLiquidity(address,uint256,uint256[],uint256)": {
            "details": "Can be called to change an existing liquidity position, or remove an LP position by withdrawing all liquidity.May be called by an authorized party (approved on the LP NFT) to withdraw liquidity on behalf of the LP Position owner.",
            "params": {
              "lpId_": "LP Position TokenID that liquidity is being removed from. Does not have to be owned by msg.sender if the msg.sender is authorized.",
              "nftIdList_": "The list of NFT tokenIds msg.sender wishes to withdraw from the pool.",
              "tokenWithdrawAmount_": "The amount of ERC20 tokens the msg.sender wishes to withdraw from the pool.",
              "withdrawalAddress_": "the address that will receive the ERC20 tokens and NFTs withdrawn from the pool."
            }
          },
          "swapNftsForTokens(uint256[],uint256[],uint256,address,address,bytes)": {
            "details": "To compute the amount of token to that will be received, call bondingCurve.getSellInfo.Key difference with sudoswap here: In sudoswap, each market maker has a separate smart contract with their liquidity. To sell to a market maker, you just check if their specific `LSSVMPair` contract has enough money. In DittoSwap, we share different market makers' liquidity in the same pool contract. So this function has an additional parameter `lpIds` forcing the buyer to check off-chain which market maker's LP position that they want to trade with, for each specific NFT that they are selling into the pool. The lpIds array should correspond with the nftIds array in the same order & indexes. e.g. to sell NFT with tokenId 1337 to the market maker who's LP position has id 42, the buyer would call this function with nftIds = [1337] and lpIds = [42].",
            "params": {
              "lpIds_": "The list of IDs of the LP positions sell the NFTs to",
              "minExpectedTokenOutput_": "The minimum acceptable token count received by the sender.    If the actual amount is less than this value, the transaction will be reverted.",
              "nftIds_": "The list of IDs of the NFTs to sell to the pair",
              "nftSender_": "NFT sender. Only used if msg.sender is an approved IDittoRouter, else msg.sender is used.",
              "permitterData_": "Data to profe that the NFT Token IDs are permitted to be sold to this pool if a permitter is set.",
              "tokenRecipient_": "The recipient of the ERC20 proceeds."
            },
            "returns": {
              "outputAmount": "The amount of token received"
            }
          },
          "swapTokensForNfts(uint256[],uint256,address,address)": {
            "details": "To compute the amount of token to send, call bondingCurve.getBuyInfo This swap is meant for users who want specific IDs. ",
            "params": {
              "maxExpectedTokenInput_": "The maximum acceptable cost from the sender (in wei or base units of ERC20). If the actual amount is greater than this value, the transaction will be reverted.",
              "nftIds_": "The list of IDs of the NFTs to purchase",
              "nftRecipient_": "Address to send the purchased NFTs to.",
              "tokenSender_": "ERC20 sender. Only used if msg.sender is an approved IDittoRouter, else msg.sender is used."
            },
            "returns": {
              "inputAmount": "The actual amount of tokens spent to purchase the NFTs."
            }
          },
          "token()": {
            "returns": {
              "_0": "The address of the ERC20 token that this pool is trading NFTs against."
            }
          },
          "transferOwnership(address)": {
            "details": "Can only be called by the current owner.",
            "params": {
              "newOwner_": "The address of the new owner"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "acceptOwnership()": {
            "notice": "Completes the transfer process to a new owner."
          },
          "addLiquidity(uint256,uint256[],uint256,bytes)": {
            "notice": "Function for market makers / liquidity providers to deposit NFTs and ERC20s into existing LP Positions."
          },
          "adminFee()": {
            "notice": "Returns the admin fee given to the pool admin as a 1e18 based percentage."
          },
          "adminFeeRecipient()": {
            "notice": "Returns the address that recieves admin fees from trades with this pool"
          },
          "basePrice()": {
            "notice": "Returns the base price to sell the next NFT into this pool, base+delta to buy Each bonding curve uses base price differently, but in general it is used as the current price of the pool."
          },
          "bondingCurve()": {
            "notice": "For use in tokenURI function metadata"
          },
          "changeAdminFee(uint96)": {
            "notice": "Change the pool admin fee, set by owner, paid to an address of the owner's choosing"
          },
          "changeAdminFeeRecipient(address)": {
            "notice": "Change who the pool admin fee for this pool is sent to."
          },
          "changeBasePrice(uint128)": {
            "notice": "Admin function to change the base price charged to buy an NFT from the pair. Each bonding curve uses this differently."
          },
          "changeDelta(uint128)": {
            "notice": "Admin function to change the delta parameter associated with the bonding curve. Each bonding curve uses this differently. "
          },
          "changeLpFee(uint96)": {
            "notice": "Admin function to change the pool lp fee, set by owner, paid to LPers only when they are the counterparty in a trade"
          },
          "createLiquidity(address,uint256[],uint256,bytes)": {
            "notice": "Function for liquidity providers to create new Liquidity Positions within the pool by depositing liquidity."
          },
          "delta()": {
            "notice": "Returns the delta parameter for the bonding curve associated this pool Each bonding curve uses delta differently, but in general it is used as an input   to determine the next price on the bonding curve."
          },
          "dittoPoolFactory()": {
            "notice": "Returns the factory that created this pool."
          },
          "fee()": {
            "notice": "Returns the cumulative fee associated with trading with this pool as a 1e18 based percentage."
          },
          "getAllLpIdTokenBalances()": {
            "notice": "returns the enumerated list of all token balances for all LP positions in this pool"
          },
          "getAllPoolHeldNftIds()": {
            "notice": "returns the full list of all NFT tokenIds that are owned by this pool"
          },
          "getAllPoolLpIds()": {
            "notice": "returns the full list of all LP Position NFT tokenIds that represent liquidity in this pool"
          },
          "getBuyNftQuote(uint256)": {
            "notice": "Read-only function used to query the bonding curve for buy pricing info."
          },
          "getLpIdForNftId(uint256)": {
            "notice": "returns the Lp Position NFT token Id that owns a specific NFT token Id in this pool"
          },
          "getLpNft()": {
            "notice": "Returns the NFT collection that represents liquidity positions in this pool"
          },
          "getNftCountForLpId(uint256)": {
            "notice": "returns the number of NFTs owned by a specific liquidity provider in this pool"
          },
          "getNftIdsForLpId(uint256)": {
            "notice": "Returns the full list of NFT tokenIds that are owned by a specific liquidity provider in this pool"
          },
          "getPoolTotalTokenBalance()": {
            "notice": "returns the full amount of all ERC20 tokens that the pool thinks it owns"
          },
          "getSellNftQuote(uint256)": {
            "notice": "Read-only function used to query the bonding curve for sell pricing info"
          },
          "getTokenBalanceForLpId(uint256)": {
            "notice": "Returns how many ERC20 tokens a liquidity provider has in the pool"
          },
          "getTotalBalanceForLpId(uint256)": {
            "notice": "returns the number of NFTs and number of ERC20s owned by a specific liquidity provider in this pool pretty much equivalent to the user's liquidity position in non-nft form."
          },
          "initPool((address,address,uint96,address,uint96,uint128,uint128,uint256[],uint256),address,address)": {
            "notice": "Used by the Contract Factory to set the initial state & parameters of the pool."
          },
          "initialized()": {
            "notice": "returns the status of whether this contract has been initialized"
          },
          "lpFee()": {
            "notice": "Returns the fee given to liquidity providers for trading with this pool."
          },
          "nft()": {
            "notice": "Returns the nft collection that this pool trades "
          },
          "onERC721Received(address,address,uint256,bytes)": {
            "notice": "function called on SafeTransferFrom of NFTs to this contract"
          },
          "owner()": {
            "notice": "Getter function to find out the current owner address"
          },
          "pendingOwner()": {
            "notice": "Getter function to find out the pending owner address"
          },
          "permitter()": {
            "notice": "Returns the permitter contract that allows or denies specific NFT tokenIds to be traded in this pool"
          },
          "protocolFee()": {
            "notice": "Returns the protocol fee associated with trading with this pool as a 1e18 based percentage."
          },
          "pullLiquidity(address,uint256,uint256[],uint256)": {
            "notice": "Function for liquidity providers to withdraw NFTs and ERC20 tokens from their LP positions."
          },
          "renounceOwnership()": {
            "notice": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner."
          },
          "swapNftsForTokens(uint256[],uint256[],uint256,address,address,bytes)": {
            "notice": "Trade a list of allowed nft ids for ERC20s."
          },
          "swapTokensForNfts(uint256[],uint256,address,address)": {
            "notice": "Trade ERC20s for a specific list of NFT token ids."
          },
          "token()": {
            "notice": "Returns the address of the ERC20 token that this pool is trading NFTs against."
          },
          "transferOwnership(address)": {
            "notice": "Starts the ownership transfer of the contract to a new account. Replaces the    pending transfer if there is one. "
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@manifoldxyz/libraries-solidity/=lib/manifold-libraries-solidity/",
        ":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        ":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":manifold-libraries-solidity/=lib/manifold-libraries-solidity/contracts/",
        ":manifoldxyz/=lib/manifoldxyz/contracts/",
        ":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/pool/DittoPool.sol": "DittoPool"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/interface/IDittoPool.sol": {
        "keccak256": "0xc09c9292012cf72897a8a6cf2bc41fe715810df18850c1faa2ed4a9bd291429d",
        "urls": [
          "bzz-raw://f14f9c2090b5e3f223cf973ec217be8e36d6e2fe13e676f2a8f3328c649fc98e",
          "dweb:/ipfs/QmVr3QjUYwcLALq857zfJaPjbeLyoDWrDQoR6VdKBtJEED"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/interface/IDittoPoolFactory.sol": {
        "keccak256": "0x9261b4348eea75436bdfa2315bba17efff068825ae9685a0c363f15839d0a00d",
        "urls": [
          "bzz-raw://fb2027959eb75ef5a7305b2d085d2225805934cf676dd349d52dd645f5990320",
          "dweb:/ipfs/QmeJaryQSjAveqVEd4ZRCyQtQiiWhZtnLFvQxAdKNmApFb"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/interface/IDittoRouter.sol": {
        "keccak256": "0xe975ff50b66c415f948b57ed1b24fd59e1757790ae50af2de1edd3787ac19cc4",
        "urls": [
          "bzz-raw://ba2651c3b5045f0d570ae7c1dc5f1cde76e0e68425bf5f49086f49f8b65e8b81",
          "dweb:/ipfs/QmarPbmuT27ya6vpxSTi4Q9iogj8BHJ3srzbrKDEpXrETS"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/interface/IERC4906.sol": {
        "keccak256": "0x46d979bbdde21c449478c35c936fcfbc562f2224b3098d9d6355fe26732ab3fc",
        "urls": [
          "bzz-raw://07d83dd9bed4f335f741576b05c06299c5335305c941440e42e933e755ef2780",
          "dweb:/ipfs/Qmf8neZ64xW1LDPzb9UGB9QAL6BDhPoHU8cutgABBJGeqv"
        ],
        "license": "CC0-1.0"
      },
      "contracts/interface/ILpNft.sol": {
        "keccak256": "0xb8d2a9e357fec1e88ed683fee4556ec9d2f75dd44ee06818c332ec0f17966f70",
        "urls": [
          "bzz-raw://e44592be1c2b886327df6463483df85bd9565d4c3c5393b6788bc0326cff23ad",
          "dweb:/ipfs/QmRHqvmkXLSKGH8WR6Uzrqd3ZkrFSvkeMTPwxc8cs2cYJT"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/interface/IMetadataGenerator.sol": {
        "keccak256": "0x4287225181943aacba4677f2b5a0b0992bfb0cd977b22e729b85f7b1789ec81e",
        "urls": [
          "bzz-raw://e2cf03e808157ecad44969f7a9515b62b087d4914270ace3953a2d2189beec0e",
          "dweb:/ipfs/QmX2CgbMaxo2wFiLhHR6oXcuTH8AJUvxDnPisAPKUZoxrv"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/interface/IOwnerTwoStep.sol": {
        "keccak256": "0x6e0fdfe76d1f673ecb2a0a9b181b713abda4c26db1d1aa1eabc9cd164fd4ae13",
        "urls": [
          "bzz-raw://c29fe9fb52cc04b72967ccf9effadb6ed39af8e5d7e4e656999de05399b3f8a6",
          "dweb:/ipfs/QmdDLFeHDnDCsgNq7fctfmg9QF7wAMhURjYpqqEs3oYdHM"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/interface/IPermitter.sol": {
        "keccak256": "0xf12fff7867fee0f5c992df0eba5a99a6c6f8178086c75b75e8493a534c2e8bac",
        "urls": [
          "bzz-raw://a7b93d151b35ee067cdb548b5601b10c0573b96306f6605fe43298a4e1223a40",
          "dweb:/ipfs/Qme2qEx7TmVrJn298nTrbT9NihqTZWZgsSmgu5m7kzwWde"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/interface/IPoolManager.sol": {
        "keccak256": "0x5e048176dd01211f2ceac0ffa8c72f6f1ebbeb23da9e364bfc51dd2e62d986cb",
        "urls": [
          "bzz-raw://b558577bcad217b083c7b43cfda6a11d1590b83065dd22bcc9d7bf34b0f451fc",
          "dweb:/ipfs/QmaWctb9qWY3S5XWvCy1pqWvLo5DaZ58Pq7316Qh542nLF"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/pool/DittoPool.sol": {
        "keccak256": "0x49361c2c8ff80ccb0595949d1cf7cbdafd9da6b5aa31cbc6c9837e70d7eab739",
        "urls": [
          "bzz-raw://92059693d386fbe42c3a32f06f4d37cb97fa525a946c21ff309f73b01d2b8992",
          "dweb:/ipfs/QmVtkUbstYthowqF9YC6nDMyFMq3b7fCCxN3SAvcD5ERa5"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/pool/DittoPoolMain.sol": {
        "keccak256": "0x8ecc7b89a7593312db1cda36393db18c665108ea5d746316ab7dcfff6ffb3c40",
        "urls": [
          "bzz-raw://587bf227fddf8e6a2e34bac4e2445c7d946992b19ba59c58e9cac5ba4a9c4b9f",
          "dweb:/ipfs/QmcY299rw15o1dfs4oURxjDQTaDt4W2RreUVJiX93YDGRX"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/pool/DittoPoolMarketMake.sol": {
        "keccak256": "0x65b0d46e97a602a8e343185723c8abd7f36b9fa2fcc7ed00b45039542d5d01d9",
        "urls": [
          "bzz-raw://99525f74b6e0ea697e073013a334985ebf4676cd8f0cb985562ea4f88ef56509",
          "dweb:/ipfs/QmWtSQDoGz2SGdEmv5UrtrbzFQ4n2voynBcvy8APRXZiUi"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/pool/DittoPoolTrade.sol": {
        "keccak256": "0xbab48cf76fbc0f49964f6443578d54513f5635104f67bfac8fb833e4aac7677d",
        "urls": [
          "bzz-raw://d044b7f52a6bc9ac7197c36ea7674f586f8842e6ede7672f6fcaa119ca39b560",
          "dweb:/ipfs/QmfZt33p4jvH5ctD686xqoQA4TjyZ9dvdGwkvQ8Vc6pVFg"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/pool/lpNft/LpNft.sol": {
        "keccak256": "0xb3a51d71b8f1accdb444b6369b50b129d744607d647fea1f80dbf2710cd014ad",
        "urls": [
          "bzz-raw://9030dcc39443ea7fbd06565510aacf45ce8cf73c97381307ac359eef443f4549",
          "dweb:/ipfs/QmS166B2kKBFgq1cGRyg1Bx2EpgSYVDyVEq6JUTuHA7Nn1"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/struct/CreatePoolParams.sol": {
        "keccak256": "0x66182ed66e6c3fd0efd4118573bf62acd20c7723a8b1c126eda540b6899b2c71",
        "urls": [
          "bzz-raw://a7429b579152768f2bef1faee722c035afbc493e5cad6a2526d322f112b80a4b",
          "dweb:/ipfs/QmWviZoep4gJ61V6tt5u45Coweasqw61kDLdNyeSAhCiEg"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/struct/FactoryTemplates.sol": {
        "keccak256": "0x5176be6ced6adfaa1f48b1916e3243c016a06e36cca26f1086083efeb974afa8",
        "urls": [
          "bzz-raw://51a0d1b5122cef5810b0c20221011a2443f2f328c2594fc87b3fb4cc2e41670b",
          "dweb:/ipfs/QmQd4GzPnqkq4AgUWijwZBwB7KihAFMd9RJGYwhDJqN3nb"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/struct/Fee.sol": {
        "keccak256": "0xdf4b1391b3a04444e2e6c0972b4018a13b689b987b4e46433b7456177e4b0919",
        "urls": [
          "bzz-raw://b6c6806de568fbc86540a17ff378ec2d5564a5d8c10f498d4ac474eadedb464a",
          "dweb:/ipfs/QmVupx7dW3btg7KzCGKFhs6DGdgvd7gPyyCVnSQK2TffVy"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/struct/LpIdToTokenBalance.sol": {
        "keccak256": "0x8b97694aa8901cc91067a54cfa3cc72c66c5330899d2758b205a55f8d7bd3088",
        "urls": [
          "bzz-raw://cdf72255ec0261c410779ac2dacceb30abc3a6380984a6bbfefc1a3a8af43315",
          "dweb:/ipfs/QmVwVNbLt6StWqT41prsnaVm6qrxEPs124fAAo7iWC4q7u"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/struct/RouterStructs.sol": {
        "keccak256": "0x46b188f7fdf86acf397d5a668cfb0a11c06bfe272e934bf384a437b2ef85fef8",
        "urls": [
          "bzz-raw://e12b9ced1da039212eb66d7a21464faacf3a976464656f080887cef5a7301720",
          "dweb:/ipfs/QmWEGN5GwQpg84YP2X8w7N18HYXgTxhttNNCZCa4NTqRGn"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/utils/CurveErrorCode.sol": {
        "keccak256": "0xfd7b43238740afdaa872ce99c113a78f65a491bf3e9aab5d8e0455f659224de4",
        "urls": [
          "bzz-raw://7acfc6b639b287c22b28cdf7e0edd5e1f85f31ecbebbd0150929797a3a197c36",
          "dweb:/ipfs/QmcD1CrAFpuKeS9HPfTwFnWfASWMJH1y7dsQmZSpxFsPjR"
        ],
        "license": "AGPL-3.0"
      },
      "contracts/utils/OwnerTwoStep.sol": {
        "keccak256": "0x931c6dc10a05c55f138e8fc5308409ba073471b4c5ce91465a4c071376c38641",
        "urls": [
          "bzz-raw://89241228e8028366e215de386590e9463e04c36fcc2ce1ca0b88fb7ab2356062",
          "dweb:/ipfs/QmcxojNRtkCxNxa8a3vSvXTvZSxudQyHUgxvWgSBBNYRrf"
        ],
        "license": "AGPL-3.0"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
        "keccak256": "0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc",
        "urls": [
          "bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010",
          "dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68",
        "urls": [
          "bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56",
          "dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
        "urls": [
          "bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
          "dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol": {
        "keccak256": "0x5094b17cb46143943f3206d0738b91a05a7005e979681af7210d534cd3e72f54",
        "urls": [
          "bzz-raw://a55fbc9ee8080ec3b397e8e32e5dafcff2c377ce44d553bfc93dfce1be2d5b12",
          "dweb:/ipfs/QmYSk6bNHnpKRyNWXmEBKbkPxXi7Hco9JZHHyxMdrZGWpb"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "keccak256": "0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961",
        "urls": [
          "bzz-raw://d7d3dd6067a994690471b5fc71b6f81fac3847798b37d404f74db00b4d3c3d0e",
          "dweb:/ipfs/QmRHF1RarifjNi93RttouNPkYZGyu6CD926PgRDzD5iL35"
        ],
        "license": "MIT"
      },
      "lib/solmate/src/tokens/ERC20.sol": {
        "keccak256": "0x698cdbf614109fafc2bf00057b60715fa3aba9dad447c42f4f8b749ae16ce84f",
        "urls": [
          "bzz-raw://49a39e71d6bde571d04722c90fd42591af806d29d8cbd4cd96f35e443702d899",
          "dweb:/ipfs/QmefLxMt6w2it9daQQFdBTtPeCWDhSqhNWuxQy8e7WrNVr"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/tokens/ERC721.sol": {
        "keccak256": "0x9efdbd33281a819df5174ae858ab68910bffc6fdf6daf82229b1d335c03d788f",
        "urls": [
          "bzz-raw://14a3b5dde1f2e1d6ee85fcf229cac0f62e20feda6ceff824e6383774fe2b0686",
          "dweb:/ipfs/QmRwtQy9znd7se79jQUEgvAUvNEegbDnoeVSdEfH3yUHiR"
        ],
        "license": "AGPL-3.0-only"
      },
      "lib/solmate/src/utils/SafeTransferLib.sol": {
        "keccak256": "0xcc39d0f5693925ea1e8c517f7cc24211a9899c83a57e62d806180cdb056b6b75",
        "urls": [
          "bzz-raw://a18e34690286eeb9d24e4913b8bb2e437fde3273d955b0ea06db6394244248ed",
          "dweb:/ipfs/QmYokhGtqtWP6Me7Z5hifWXBBBFcfr2EHNWSRCFmr9eZ7S"
        ],
        "license": "AGPL-3.0-only"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/pool/DittoPool.sol",
    "id": 5772,
    "exportedSymbols": {
      "DittoPool": [
        5771
      ],
      "DittoPoolMain": [
        7675
      ],
      "DittoPoolMarketMake": [
        8167
      ],
      "DittoPoolTrade": [
        9251
      ],
      "IDittoPool": [
        356
      ]
    },
    "nodeType": "SourceUnit",
    "src": "37:501:21",
    "nodes": [
      {
        "id": 5753,
        "nodeType": "PragmaDirective",
        "src": "37:23:21",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 5755,
        "nodeType": "ImportDirective",
        "src": "62:57:21",
        "nodes": [],
        "absolutePath": "contracts/interface/IDittoPool.sol",
        "file": "../interface/IDittoPool.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5772,
        "sourceUnit": 357,
        "symbolAliases": [
          {
            "foreign": {
              "id": 5754,
              "name": "IDittoPool",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 356,
              "src": "71:10:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 5757,
        "nodeType": "ImportDirective",
        "src": "121:52:21",
        "nodes": [],
        "absolutePath": "contracts/pool/DittoPoolMain.sol",
        "file": "./DittoPoolMain.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5772,
        "sourceUnit": 7676,
        "symbolAliases": [
          {
            "foreign": {
              "id": 5756,
              "name": "DittoPoolMain",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 7675,
              "src": "130:13:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 5759,
        "nodeType": "ImportDirective",
        "src": "174:64:21",
        "nodes": [],
        "absolutePath": "contracts/pool/DittoPoolMarketMake.sol",
        "file": "./DittoPoolMarketMake.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5772,
        "sourceUnit": 8168,
        "symbolAliases": [
          {
            "foreign": {
              "id": 5758,
              "name": "DittoPoolMarketMake",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 8167,
              "src": "183:19:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 5761,
        "nodeType": "ImportDirective",
        "src": "239:54:21",
        "nodes": [],
        "absolutePath": "contracts/pool/DittoPoolTrade.sol",
        "file": "./DittoPoolTrade.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 5772,
        "sourceUnit": 9252,
        "symbolAliases": [
          {
            "foreign": {
              "id": 5760,
              "name": "DittoPoolTrade",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 9251,
              "src": "248:14:21",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 5771,
        "nodeType": "ContractDefinition",
        "src": "440:97:21",
        "nodes": [],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 5763,
              "name": "IDittoPool",
              "nameLocations": [
                "471:10:21"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 356,
              "src": "471:10:21"
            },
            "id": 5764,
            "nodeType": "InheritanceSpecifier",
            "src": "471:10:21"
          },
          {
            "baseName": {
              "id": 5765,
              "name": "DittoPoolMain",
              "nameLocations": [
                "483:13:21"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7675,
              "src": "483:13:21"
            },
            "id": 5766,
            "nodeType": "InheritanceSpecifier",
            "src": "483:13:21"
          },
          {
            "baseName": {
              "id": 5767,
              "name": "DittoPoolMarketMake",
              "nameLocations": [
                "498:19:21"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 8167,
              "src": "498:19:21"
            },
            "id": 5768,
            "nodeType": "InheritanceSpecifier",
            "src": "498:19:21"
          },
          {
            "baseName": {
              "id": 5769,
              "name": "DittoPoolTrade",
              "nameLocations": [
                "519:14:21"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 9251,
              "src": "519:14:21"
            },
            "id": 5770,
            "nodeType": "InheritanceSpecifier",
            "src": "519:14:21"
          }
        ],
        "canonicalName": "DittoPool",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 5762,
          "nodeType": "StructuredDocumentation",
          "src": "295:144:21",
          "text": " @title DittoPool\n @notice DittoPool AMM shared liquidity trading pools. See DittoPoolMain, MarketMake and Trade for implementation."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          5771,
          9251,
          8167,
          7675,
          96000,
          356,
          65100,
          994
        ],
        "name": "DittoPool",
        "nameLocation": "458:9:21",
        "scope": 5772,
        "usedErrors": [
          6792,
          6796,
          6798,
          6800,
          6802,
          6806,
          6810,
          6812,
          6814,
          7728,
          7730,
          7732,
          7734,
          7736,
          8247,
          8249,
          8251,
          8253,
          8255,
          8257,
          8259,
          8261,
          8263,
          8267,
          8269,
          64966,
          64968
        ]
      }
    ],
    "license": "AGPL-3.0"
  },
  "id": 21
}